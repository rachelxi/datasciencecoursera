months(t1)
quarters(t2)
t3<- c("October 17, 1986 08:24")
t3<- c("October 17, 1986 08:24")
info()
?as.time
?as.Time
t3<- as.character("October 17, 1986 08:24")
t3<- as.time("October 17, 1986 08:24")
t3<- as.Date("October 17, 1986 08:24")
t3<- as.string("October 17, 1986 08:24")
t3<- as.str("October 17, 1986 08:24")
t3<- as.character("October 17, 1986 08:24")
info()
skip()
strptime(t3,"%B %d,%Y %H:%M")
t4<- strptime(t3,"%B %d,%Y %H:%M")
t4<- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
?parent.frame
a<- array(rnorm(2 * 2 * 10),c(2,2,10))
a
?gl
gl(2, 8, labels = c("Control", "Treat"))
library(datasets)
data(iris)
?iris
iris
?split
split(iris,species)
split(iris,iris$species)
s<- split(iris,iris$Species)
sapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(s,function(iris) colMeans(iris[,c("Sepal.Length")]))
sapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
apply(iris, 2, mean)
apply(iris, 1, mean)
warnings()
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
mtcars
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429-82.63636
debug(ls)
ls()
q()
q()
w
q()
source('~/Datascience/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
A <- matrix(c(1,5,4,2,3,18,3,9,10),nrow=3,ncol=3)
B<- makeCacheMatrix(A)
B$getinverse()
cacheSolve(B)
B
B$getinverse
B$getinverse()
C<-matrix(c(1:4,7,8,9,5,5:8,4:1),nrow=4,ncol=4)
B$set(C)
B$set()
B$getinverse()
B$get()
cacheSolve(B)
exit()
q()
set.seed(1)
rpois(5, 2)
?rpois
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?ppois
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1<- x
x2<- e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
exit()
q()
?rnorm
?random
sample(1:10, 10, replace=TRUE)
swirl()
library(swirl)
swirl()
quit()
library(swirl)
swirl()
mydf <- read.csv(path2csv,StringAsFactors=False)
mydf <- read.csv(path2csv,stringAsFactors=False)
?read.csv
mydf <- read.csv(path2csv,stringsAsFactors=False)
mydf <- read.csv(path2csv,stringsAsFactors == False)
mydf <- read.csv(path2csv,stringsAsFactors = False)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors =FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(time:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country
| == "IN")
filter(cran, country == "US" | country== "IN")
filter(cran, size>100500,r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3,
| 5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
exit()
quit()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
head(top_counts, 20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?desc
submit()
library(tidyr)
students
?gather
gather(student,sex,count,-grade)
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count)
res<-gather(students2,sex,count)
res<-gather(students2,sex,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
skip()
extract_numeric("class5")
?mutate
?mutate
?mutate
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
rbind_list(passed,failed)
sat
sat
sat
skip()
swirl()
sat
View(sat)
View(sat)
sat
skip()
quit()
library(swirl)
swirl()
sat
0
skip()
swirl()
print(sat)
View(sat)
skip()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,now(this_moment))
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=hours+hours(17),minutes=minutes+minutes(34))
depart<-update(depart,hours(17),minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
?mdy
last_time<-mdy("June 17,2008",tz="Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_arrival
?new_interval
new_interval(last_time,arrive)
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
sat
skip()
?load
wk1quiz<-load("~/Datascience/Data/wk1quiz.csv")
load("~/Datascience/Data/wk1quiz.csv")
wk1quiz<-read.csv("~/Datascience/Data/wk1quiz.csv")
download("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","~/Datascience/Data/gov.xlsx")
?download
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","~/Datascience/Data/gov.xlsx")
?read.xlsx
library(xlsx)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dowload.file(url,"~/Datascience/Data/gov1.xlsx")
download.file(url,"~/Datascience/Data/gov1.xlsx")
gov<-read.xlsx("~/Datascience/Data/DATA.gov_NGAP.xlsx")
library(xlsx)
?search
search(xlsx)
search("xlsx")
search()
install.packages("xlsx")
library(xlsx)
library(rjava)
library(rJava)
library(swirl)
swirl()
sat
?nchar
library(data.table)
sat
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
swirl()
library(swirl)
swirl()
sat
View(sat)
skip()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2,sex_class,count)
exit()
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p\)
print(p)
?trellis.par.set
?splom
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(cran)
library(CRAN)
install.packages("CRAN")
install.packages("ggplot2")
library(ggplot2)
q()
install.packages("ggplot2")
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(lattice)
?lpoints
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
library(colorspace)
library(ggplot2)
?qplot
?ggplot
str(mpg)
qplot(dipl,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
q()
?par
?hist
q()
?xyplot
?bwplot
library(CRAN)
library(ggplot)
library(ggplot2)
?xyplot
?bwplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
q()
setwd("~/Datascience/5Assessment1")
data<-read.csv("activity.csv")
data<-read.csv("activity.csv")
#Q1What is mean total number of steps taken per day?
Q1<-data[complete.cases(data),]
StepsPerDay<-tapply(Q1$steps,Q1$date,sum)
windows()
hist(StepsPerDay)
dev.off()
mean(StepsPerDay,na.rm=TRUE)
median(StepsPerDay,na.rm=TRUE)
#Q2What is the average daily activity pattern?
Q2<-data[complete.cases(data),]
StepsPerInterval<-aggregate(Q2$steps,list(Q2$interval),mean)
colnames(StepsPerInterval)<-c("Interval","stepsPerInterval")
windows()
plot(StepsPerInterval,type="l")
title("Average Steps Per Interval")
dev.off()
max(StepsPerInterval$stepsPerInterval)
#Q3Imputing missing values
sum(is.na(data))
#Strategy: replace the NAs with mean steps of that day
Q3<-data
Replace<-tapply(Q1$steps,Q1$date,mean)
Replace[is.na(Replace)]<-0
Dates<-as.character(data$date)
NAindex<-which(is.na(data))
n<-length(NAindex)
for(i in 1:n){
index<-NAindex[i]
inter<-grep(Dates[index],names(Replace))
Q3$steps[index]<-Replace[inter]
}
StepsPerDay2<-tapply(Q3$steps,Q3$date,sum)
windows()
hist(StepsPerDay2)
dev.off()
mean(StepsPerDay2,na.rm=TRUE)
median(StepsPerDay2,na.rm=TRUE)
#Q4Are there differences in activity patterns between weekdays and weekends?
Sys.setlocale("LC_TIME", "English")
Indicator<-(weekdays(as.Date(Q3$date)))
n<-length(Indicator)
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
for(i in 1:n){
inter2<-grepl(Indicator[i],weekday)
if(sum(inter2)==1){Indicator[i]<-"weekday"}
if(sum(inter2)==0){Indicator[i]<-"weekend"}
}
Q4<-cbind(Q3,Indicator)
